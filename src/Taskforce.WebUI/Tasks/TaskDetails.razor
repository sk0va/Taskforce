@page "/tasks/{TaskId:guid}"
@using Taskforce.Domain
@using Taskforce.Domain.Entities
@using Taskforce.Db.Tasks
@using Taskforce.WebUI.Components

@inject IEntityQuery<Domain.Tasks.Task> query
@inject ICommandLauncher commandLauncher
@inject NavigationManager nm;

<EntityDetails TargetId="@TaskId"
    Properties="@_props" 
    Error="@_error"
    ResourcesListUri="/tasks"
    BackToLabel="Back to Events"
    DeleteHandler="OnDelete"/>

@code {
    [Parameter]
    public Guid TaskId { get; set; }

    private Domain.Tasks.Task _task = null;
    public string _error = null;

    private List<(string Name, string Value)> _props = null; 

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var spec = new TaskSpecification();
        spec.ById(TaskId);

        _task = (await query.GetListAsync(spec, default)).FirstOrDefault();

        if (_task == null)
        {
            _error = $"Task with ID={TaskId} is not found";
            return;
        }

        string s(object o) { return o == null ? "" : o.ToString(); };
        
        _props = new List<(string, string)>()
        {
            (nameof(_task.Id), s(_task.Id)),
            (nameof(_task.IsTemplate), _task.IsTemplate.ToString()),

            (nameof(_task.Title), _task.Title.ToString()),
            (nameof(_task.Description), _task.Description.ToString()),
            (nameof(_task.State), _task.State.ToString()),
            (nameof(_task.DueDate), s(_task.DueDate)),
            (nameof(_task.CompletedDate), s(_task.CompletedDate)),

            (nameof(_task.IsDeleted), _task.IsDeleted.ToString()),
            (nameof(_task.CreatedDate), _task.CreatedDate.ToString()),
            (nameof(_task.UpdatedDate), s(_task.UpdatedDate)),
            (nameof(_task.DeletedDate), s(_task.DeletedDate))
        };
    }

    public async System.Threading.Tasks.Task OnDelete()
    {
        var command = new DeleteEntityByIdCommand<Domain.Tasks.Task>()
        {
            Id = TaskId
        };

        await commandLauncher.Run(command, default);
        nm.NavigateTo("tasks");
    }
}
