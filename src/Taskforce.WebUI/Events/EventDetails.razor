@page "/events/{EventId:guid}"
@using Taskforce.Domain
@using Taskforce.Domain.Events
@using Taskforce.Db.Events
@using Taskforce.WebUI.Components

@inject IEntityQuery<Event> query

@if (_event != null)
{
    <div calss="container mb-3">
        <NavButton Subclass="primary" TargetUri="@($"/events/{EventId}/edit")"> Edit </NavButton>
        <NavButton Subclass="outline-dark" TargetUri="events"> Back to Tasks </NavButton>
    </div>
    
    <form>
        @foreach(var r in _props)
        {   
            <div class="row mb-3">
                <label for="@(r.Name)" class="col-sm-2 col-form-label">@(r.Name)</label>
                <div class="col-sm-10">
                <input 
                    type="text"
                    class="form-control" 
                    id="@(r.Name)" 
                    name="@(r.Name)" 
                    value="@(r.Value)" 
                    readonly>
                </div>
            </div>
        }
    </form>
} 
else if(_error != null)
{
    <div class="alert alert-danger">
        @_error
    </div>
} 
else 
{
    <p><em>...Loading</em></p>
}

@code {
    [Parameter]
    public Guid EventId { get; set; }

    private Event _event = null;
    private string _error = null;

    private List<(string Name, string Value)> _props = null;

    protected override async Task OnInitializedAsync()
    {
        var spec = new EventSpecification();
        spec.ById(EventId);

        _event = (await query.GetListAsync(spec, default)).FirstOrDefault();

        if (_event == null)
        {
            _error = $"Event with ID={EventId} is not found";
            return;
        }
        
        string s(object o) { return o == null ? "" : o.ToString(); };
        
        _props = new List<(string, string)>()
        {
            (nameof(_event.Id), s(_event.Id)),

            (nameof(_event.IsTemplate), s(_event.IsTemplate)),

            (nameof(_event.Title), _event.Title),
            (nameof(_event.Type), _event.Type),
            (nameof(_event.Description), _event.Description),
            (nameof(_event.StartDate), s(_event.StartDate)),
            (nameof(_event.EndDate), s(_event.EndDate)),

            (nameof(_event.IsDeleted), _event.IsDeleted.ToString()),
            (nameof(_event.CreatedDate), _event.CreatedDate.ToString()),
            (nameof(_event.UpdatedDate), s(_event.UpdatedDate)),
            (nameof(_event.DeletedDate), s(_event.DeletedDate))
        };
    }
}
