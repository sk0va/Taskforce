@page "/events/{EventId:guid}"

@using Taskforce.Domain
@using Taskforce.Domain.Events
@using Taskforce.Db.Events
@using Taskforce.WebUI.Components
@using Taskforce.Domain.Entities

@inject IEntityQuery<Event> query
@inject ICommandLauncher commandLauncher
@inject NavigationManager nm


<EntityDetails TargetId="@EventId" 
    Properties="@_props" 
    Error="@_error" 
    ResourcesListUri="/tasks"
    BackToLabel="Back to Events"
    DeleteHandler="OnDelete"/>

Back to Tasks

@code {
    [Parameter]
    public Guid EventId { get; set; }

    private Event _event = null;
    private string _error = null;

    private List<(string Name, string Value)> _props = null;

    protected override async Task OnInitializedAsync()
    {
        var spec = new EventSpecification();
        spec.ById(EventId);

        _event = (await query.GetListAsync(spec, default)).FirstOrDefault();

        if (_event == null)
        {
            _error = $"Event with ID={EventId} is not found";
            return;
        }
        
        string s(object o) { return o == null ? "" : o.ToString(); };
        
        _props = new List<(string, string)>()
        {
            (nameof(_event.Id), s(_event.Id)),

            (nameof(_event.IsTemplate), s(_event.IsTemplate)),

            (nameof(_event.Title), _event.Title),
            (nameof(_event.Type), _event.Type),
            (nameof(_event.Description), _event.Description),
            (nameof(_event.StartDate), s(_event.StartDate)),
            (nameof(_event.EndDate), s(_event.EndDate)),

            (nameof(_event.IsDeleted), _event.IsDeleted.ToString()),
            (nameof(_event.CreatedDate), _event.CreatedDate.ToString()),
            (nameof(_event.UpdatedDate), s(_event.UpdatedDate)),
            (nameof(_event.DeletedDate), s(_event.DeletedDate))
        };
    }

    public async Task OnDelete()
    {
        var command = new DeleteEntityByIdCommand<Event>
        {
            Id = EventId
        };
        await commandLauncher.Run(command, default);
    }
}
